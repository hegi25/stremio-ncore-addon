diff --git a/index.d.ts b/index.d.ts
index cecebd1d96e56c37b827ec1ec9e0253a78120726..af5534a14fb4159aa028ba4b59e6141c56e5a975 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -46,6 +46,7 @@ declare namespace WebTorrent {
     interface ServerBase {
         client: Instance;
         pathname: string;
+        listen(port?: number): void;
         address(): ServerAddress;
         close(cb?: () => void): void;
         destroy(cb?: () => void): void;
@@ -77,6 +78,8 @@ declare namespace WebTorrent {
         preloadedStore?(): void;
         strategy?: string | undefined;
         createdBy?: string | undefined;
+        deselect?: boolean | undefined;
+        paused?: boolean | undefined;
     }
 
     interface TorrentDestroyOptions {
@@ -137,7 +140,7 @@ declare namespace WebTorrent {
         readonly torrents: Torrent[];
 
         // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
-        get(torrentId: Torrent | string | Buffer): Torrent | void;
+        get(torrentId: Torrent | string | Buffer): Promise<Torrent | undefined>;
 
         throttleDownload(rate: number): boolean | undefined;
 
@@ -251,6 +254,10 @@ declare namespace WebTorrent {
 
         readonly progress: number;
 
+        readonly offset: number;
+
+        readonly type: string;
+
         get streamURL(): string;
 
         select(): void;
@@ -259,6 +266,8 @@ declare namespace WebTorrent {
 
         createReadStream(opts?: { start: number; end: number }): NodeJS.ReadableStream;
 
+        stream(opts?: { start: number; end: number }): ReadableStream;
+
         getBuffer(callback: (err: string | Error | undefined, buffer?: Buffer) => void): void;
 
         appendTo(
@@ -292,7 +301,14 @@ declare namespace WebTorrent {
         getBlob(callback: (err: string | Error | undefined, blob?: Blob) => void): void;
 
         getBlobURL(callback: (err: string | Error | undefined, blobURL?: string) => void): void;
+        
+        [Symbol.asyncIterator]: (opts: {start: number; end: number}) => FileIterator
     }
+ 
+    interface FileIterator extends AsyncIterator<Uint8Array> {
+        [Symbol.asyncIterator]: () => AsyncIterator<Uint8Array>
+    }
+
 
     interface TorrentPiece {
         readonly length: number;
